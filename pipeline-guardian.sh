#!/bin/bash
# Pipeline Guardian - Automatisk pipeline-√∂vervakare och probleml√∂sare
# K√∂rs kontinuerligt och fixar pipeline-problem automatiskt

# F√§rger
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
RESET="\033[0m"
BOLD="\033[1m"

# Konfiguration
MONITOR_INTERVAL=15  # Sekunder mellan kontroller
MAX_FIX_ATTEMPTS=3   # Max antal f√∂rs√∂k att fixa samma problem
LOG_FILE=".pipeline-guardian.log"

# R√§knare f√∂r probleml√∂sning
declare -A fix_attempts

# Loggfunktion
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Banner
show_banner() {
    clear
    echo -e "${BOLD}${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  PIPELINE GUARDIAN üõ°Ô∏è                     ‚ïë"
    echo "‚ïë              Automatisk Pipeline-√∂vervakare                ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
    echo -e "${CYAN}ü§ñ Jag √∂vervakar din pipeline och fixar problem automatiskt${RESET}\n"
}

# Kontrollera pipeline status
check_pipeline_status() {
    log "INFO" "Kontrollerar pipeline status..."
    
    # K√∂r pipeline check och f√•nga output
    local output
    output=$(node scripts/check-pipeline.js --json 2>/dev/null)
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        # Pipeline gr√∂n
        echo -e "${GREEN}‚úÖ Pipeline GR√ñN${RESET}"
        log "SUCCESS" "Pipeline √§r gr√∂n"
        return 0
    else
        # Pipeline har problem
        echo -e "${RED}‚ùå Pipeline har problem${RESET}"
        log "ERROR" "Pipeline misslyckad med exit code: $exit_code"
        return 1
    fi
}

# Analysera och fixa TypeScript-problem
fix_typescript_issues() {
    log "INFO" "Analyserar TypeScript-problem..."
    
    # Testa lokal TypeScript kompilering
    if ! npx tsc --build >/dev/null 2>&1; then
        log "ERROR" "TypeScript kompileringsfel uppt√§ckt"
        
        # Rensa build-artefakter
        log "INFO" "Rensar TypeScript build-artefakter..."
        find . -name "*.tsbuildinfo" -delete
        find . -name "dist" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # F√∂rs√∂k bygga igen
        if npx tsc --build; then
            log "SUCCESS" "TypeScript-problem l√∂st genom att rensa build-artefakter"
            return 0
        else
            log "ERROR" "TypeScript-problem kvarst√•r efter clean"
            return 1
        fi
    fi
    
    return 0
}

# Fixa npm dependency-problem
fix_dependency_issues() {
    log "INFO" "Kontrollerar npm dependencies..."
    
    # Kontrollera om package-lock.json √§r synkroniserad
    if ! npm ci >/dev/null 2>&1; then
        log "ERROR" "npm ci misslyckades, f√∂rs√∂ker npm install"
        
        if npm install; then
            log "SUCCESS" "Dependencies uppdaterade med npm install"
            
            # Committa uppdaterad package-lock.json om den √§ndrats
            if git diff --name-only | grep -q "package-lock.json"; then
                log "INFO" "Commitar uppdaterad package-lock.json"
                git add package-lock.json
                git commit -m "fix: Automatisk uppdatering av package-lock.json

- Synkroniserad av Pipeline Guardian üõ°Ô∏è
- L√∂ser dependency-konflikter automatiskt"
                
                if git push; then
                    log "SUCCESS" "Uppdaterad package-lock.json pushad till remote"
                    return 0
                else
                    log "ERROR" "Kunde inte pusha package-lock.json uppdatering"
                    return 1
                fi
            fi
            return 0
        else
            log "ERROR" "npm install misslyckades"
            return 1
        fi
    fi
    
    return 0
}

# Fixa linting-problem
fix_linting_issues() {
    log "INFO" "Kontrollerar och fixar linting-problem..."
    
    # F√∂rs√∂k auto-fix med ESLint
    if npm run lint -- --fix >/dev/null 2>&1; then
        # Kontrollera om filer √§ndrades
        if ! git diff --quiet; then
            log "INFO" "Auto-fixade linting-problem"
            git add .
            git commit -m "fix: Automatisk linting-fix

- Auto-fixade av Pipeline Guardian üõ°Ô∏è
- ESLint --fix applicerat"
            
            if git push; then
                log "SUCCESS" "Linting-fixes pushade till remote"
                return 0
            fi
        fi
    fi
    
    return 0
}

# Huvudfunktion f√∂r probleml√∂sning
attempt_fix() {
    local problem_type="$1"
    local fix_key="$problem_type"
    
    # Kontrollera antal f√∂rs√∂k
    if [ "${fix_attempts[$fix_key]:-0}" -ge $MAX_FIX_ATTEMPTS ]; then
        log "WARNING" "Max f√∂rs√∂k n√•tt f√∂r $problem_type, hoppar √∂ver"
        return 1
    fi
    
    # √ñka r√§knare
    ((fix_attempts[$fix_key]++))
    
    echo -e "${YELLOW}üîß F√∂rs√∂ker fixa: $problem_type (f√∂rs√∂k ${fix_attempts[$fix_key]}/$MAX_FIX_ATTEMPTS)${RESET}"
    
    case "$problem_type" in
        "dependencies")
            fix_dependency_issues
            ;;
        "typescript")
            fix_typescript_issues
            ;;
        "linting")
            fix_linting_issues
            ;;
        *)
            log "ERROR" "Ok√§nd problemtyp: $problem_type"
            return 1
            ;;
    esac
}

# √ñvervakningsloop
monitor_loop() {
    log "INFO" "Startar Pipeline Guardian √∂vervakningsloop"
    
    while true; do
        echo -e "\n${CYAN}üîç Kontrollerar pipeline $(date '+%H:%M:%S')...${RESET}"
        
        if check_pipeline_status; then
            # Pipeline √§r gr√∂n
            echo -e "${GREEN}üòä Allt ser bra ut! Vilandes i $MONITOR_INTERVAL sekunder...${RESET}"
            
            # Nollst√§ll r√§knare n√§r allt fungerar
            unset fix_attempts
            declare -A fix_attempts
        else
            # Pipeline har problem - f√∂rs√∂k fixa
            echo -e "${RED}üò∞ Pipeline-problem uppt√§ckt! F√∂rs√∂ker l√∂sa automatiskt...${RESET}"
            
            # F√∂rs√∂k olika fix-strategier
            attempt_fix "dependencies"
            sleep 5
            attempt_fix "typescript" 
            sleep 5
            attempt_fix "linting"
            
            echo -e "${BLUE}‚è≥ V√§ntar p√• n√§sta pipeline-k√∂rning...${RESET}"
        fi
        
        sleep $MONITOR_INTERVAL
    done
}

# Cleanup p√• exit
cleanup() {
    log "INFO" "Pipeline Guardian avslutas"
    echo -e "\n${YELLOW}üëã Pipeline Guardian avst√§ngd${RESET}"
    exit 0
}

# Registrera cleanup-funktion
trap cleanup SIGINT SIGTERM

# Huvudprogram
main() {
    show_banner
    
    # Kontrollera att vi √§r i r√§tt directory
    if [ ! -f "package.json" ] || [ ! -d ".git" ]; then
        echo -e "${RED}‚ùå M√•ste k√∂ras fr√•n projektets root-directory${RESET}"
        exit 1
    fi
    
    # Kontrollera att GitHub token finns
    if [ -z "$GITHUB_TOKEN" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  GITHUB_TOKEN ej satt, vissa funktioner kan vara begr√§nsade${RESET}"
    fi
    
    log "INFO" "Pipeline Guardian startar √∂vervaknings"
    echo -e "${GREEN}üöÄ Startar automatisk pipeline-√∂vervakning...${RESET}"
    echo -e "${CYAN}Tryck Ctrl+C f√∂r att avsluta${RESET}\n"
    
    monitor_loop
}

# K√∂r huvudprogram
main "$@"
